{"version":3,"sources":["../../controller/NotificationController.js"],"names":["Application","require","Notification","exports","create","req","res","next","console","log","checkBody","notEmpty","notification","channel_name","body","title","errors","validationErrors","status","json","save","err","message","io","in","emit","list","query","find","where","equals","limit","sort","exec","notifications"],"mappings":";;AAAA,IAAMA,cAAcC,QAAQ,uBAAR,CAApB;AACA,IAAMC,eAAeD,QAAQ,wBAAR,CAArB;;AAEA;AACAE,QAAQC,MAAR,GAAiB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACvCC,YAAQC,GAAR,CAAY,oBAAZ;AACAJ,QAAIK,SAAJ,CAAc,cAAd,EAA8B,6BAA9B,EAA6DC,QAA7D;AACAN,QAAIK,SAAJ,CAAc,OAAd,EAAuB,yBAAvB,EAAkDC,QAAlD;AACAN,QAAIK,SAAJ,CAAc,MAAd,EAAsB,sBAAtB,EAA8CC,QAA9C;;AAEA,QAAIC,eAAe,IAAIV,YAAJ,CAAiB;AAChCW,sBAAcR,IAAIS,IAAJ,CAASD,YADS;AAEhCE,eAAOV,IAAIS,IAAJ,CAASC,KAFgB;AAGhCD,cAAMT,IAAIS,IAAJ,CAASA;AAHiB,KAAjB,CAAnB;AAKA,QAAIE,SAASX,IAAIY,gBAAJ,EAAb;AACA,QAAID,MAAJ,EAAY;AACRV,YAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,oBAAZ,EAAkC,WAAWH,MAA7C,EAArB;AACA;AAEH;AACDJ,iBAAaQ,IAAb,CAAkB,UAAUC,GAAV,EAAe;AAC7B,YAAIA,GAAJ,EAAS;AACLf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAWE,IAAIC,OAAhB,EAAyB,WAAW,EAApC,EAArB;AACA;AACH,SAHD,MAGO;AACH;AACAhB,gBAAIiB,EAAJ,CAAOC,EAAP,CAAUZ,aAAaC,YAAvB,EAAqCY,IAArC,CAA0C,KAA1C,EAAiDb,YAAjD;AACF;AACEN,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,IAAZ,EAAkB,WAAWP,YAA7B,EAArB;AAEH;AACJ,KAXD;AAaH,CA9BD;;AAiCAT,QAAQuB,IAAR,GAAa,UAASrB,GAAT,EAAaC,GAAb,EAAiBC,IAAjB,EAAsB;AAC/B,QAAIoB,QAAQzB,aAAa0B,IAAb,EAAZ;AACA,QAAGvB,IAAIS,IAAJ,CAASD,YAAZ,EAAyB;AACrBc,cAAME,KAAN,CAAY,cAAZ,EAA4BC,MAA5B,CAAmCzB,IAAIS,IAAJ,CAASD,YAA5C;AACH;AACDc,UAAMI,KAAN,CAAY,EAAZ,EAAgBC,IAAhB,CAAqB,WAArB;AACAL,UAAMM,IAAN,CAAW,UAAUZ,GAAV,EAAca,aAAd,EAA6B;AACpC,YAAIb,GAAJ,EAAS;AACLf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAWE,IAAIC,OAAhB,EAAyB,WAAW,EAApC,EAArB;AACA;AACH,SAHD,MAGO;AACHhB,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,IAAZ,EAAkB,WAAWe,aAA7B,EAArB;AACH;AACJ,KAPD;AAUH,CAhBD","file":"NotificationController.js","sourcesContent":["const Application = require('../models/Application');\nconst Notification = require('../models/Notification');\n\n//Create a notification\nexports.create = function (req, res, next) {\n    console.log('notificationcreate')\n    req.checkBody('channel_name', 'Channel id cannot be empty.').notEmpty();\n    req.checkBody('title', 'Title must not be empty').notEmpty();\n    req.checkBody('body', 'Body cannot be empty').notEmpty();\n\n    var notification = new Notification({\n        channel_name: req.body.channel_name,\n        title: req.body.title,\n        body: req.body.body,\n    });\n    var errors = req.validationErrors();\n    if (errors) {\n        res.status(400).json({\"message\": \"invalid parameters\", \"payload\": errors});\n        return;\n\n    }\n    notification.save(function (err) {\n        if (err) {\n            res.status(400).json({\"message\": err.message, \"payload\": {}});\n            return\n        } else {\n            // Notification saved now start broadcasting.\n            res.io.in(notification.channel_name).emit(\"msg\", notification);\n          //  res.io.in(notification.channel_name).emit('message', 'cool game');\n            res.status(200).json({\"message\": \"ok\", \"payload\": notification});\n\n        }\n    });\n\n};\n\n\nexports.list=function(req,res,next){\n    var query = Notification.find();\n    if(req.body.channel_name){\n        query.where('channel_name').equals(req.body.channel_name);\n    }\n    query.limit(10).sort('createdAt');\n    query.exec(function (err,notifications) {\n        if (err) {\n            res.status(400).json({\"message\": err.message, \"payload\": {}});\n            return\n        } else {\n            res.status(200).json({\"message\": \"ok\", \"payload\": notifications});\n        }\n    });\n\n\n};\n"]}